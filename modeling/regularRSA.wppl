var possibleUtterances = _.flatten(map(function(modifier) {
  map(function(type) {
    return [modifier, type].join(' ').trim();
  }, ['apple', 'fish', 'cup']);
}, ['red', 'blue', 'green', '']));

var possibleObjects = [
  {type: 'apple', color: 'red'}, {type: 'apple', color: 'blue'}, {type: 'apple', color: 'green'},
  {type: 'fish', color: 'red'}, {type: 'fish', color: 'blue'}, {type: 'fish', color: 'green'},
  {type: 'cup', color: 'red'}, {type: 'cup', color: 'blue'}, {type: 'cup', color: 'green'}]

var exampleContext = {
  shared: [  
    {type: 'apple', color: 'red'},
    {type: 'fish', color: 'blue'},
    {type: 'cup', color: 'green'}
  ],
  occluded: [
    {type: 'fish', color: 'red'}
  ]
};

var alpha = 3;

var uttCost = function(utt) {
  return utt.split(' ').length;
}

var uttFitness = function(utt, object) {
  var descriptors = utt.split(' ');
  if(descriptors.length > 1) {
    return (object.color === descriptors[0] && 
            object.type === descriptors[1]) ? 0 : -100;
  } else {
    return object.type === descriptors[0] ? 0 : -100;
  }
};

var L0 = cache(function(utt, perceivedContext) {
  return Infer({method: 'enumerate'}, function() {
    var object = uniformDraw(perceivedContext);
    factor(uttFitness(utt, object));
    return object;
  });
});

var S1 = cache(function(target, knownContext) {
  return Infer({method: 'enumerate'}, function() {
    var utt = uniformDraw(possibleUtterances);   
    factor(alpha * L0(utt, knownContext).score(target) - uttCost(utt));
    return utt;
  }); 
});

// Listener only considers objects speaker can see (model Keysar is arguing against)
var L2 = cache(function(utt, perceivedContext) {
  var fullObjSet = perceivedContext.shared.concat(perceivedContext.occluded);
  return Infer({method: 'enumerate'}, function() {
    var object = uniformDraw(perceivedContext.shared);    
    var speakerContext = perceivedContext.shared;
    observe(S1(object, speakerContext), utt);
    return object.color + " " + object.type;
  });
});

console.log("speaker utterance to refer to fish");
viz.table(S1({type: 'fish', color: 'blue'}, exampleContext.shared));

console.log("listener response after hearing (underinformative) 'fish'");
viz.table(L2('fish', exampleContext));
