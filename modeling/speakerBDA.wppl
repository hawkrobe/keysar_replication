// run using:
// webppl BDA.wppl --require ./refModule/

// Fix some configuration options
var globalConfig = {
  'storePredictives' : false,
  'outputFileName' : 'testing'
};

// Load in data & conditions
var data = refModule.readCSV("./bdaInput/speaker-cassette-only.csv");
var conditions = refModule.readCSV("./bdaInput/conditions-cassette-only.csv");

var modelAnalysis = function() {
  // Sample params (and eventually model, for model comparison)
  var model = uniformDraw(['egocentric', 'visualAccess', 'weighted', 'uncertainRSA']);
  var params = {
    model,
    alpha : Number.parseFloat(uniformDraw(_.range(.5, 5, 0.1))),
    costWeight : Number.parseFloat(uniformDraw(_.range(0,0.2,0.01)).toFixed(2)),
    typWeight : Number.parseFloat(uniformDraw(_.range(.5, 5, .1))),
    omniscienceProb: (model === 'visualAccess' ? 0 :
		      Number.parseFloat(uniformDraw(_.range(0, 1, 0.05))))
  };
  
  var lexicon = refModule.constructLexicon(params);
  
  var score = reduce(function(conditionObj, memo) {
    // Extract condition information
    var conditionName = conditionObj.conditionName;
    var context = {shared: [conditionObj.target, 'other1', 'other2'],
		   occluded: [conditionObj.distractor]};
    var speakerContext = context.shared;
    
    // Run model
    var modelOutput = speakerModel(context.shared[0], context,
				   extend(params, {lexicon}));
    
    // Store predives
    // if(globalConfig.storePredictives) {
    //   foreach(modelOutput.support(), function(s){
    // 	var key = _.values(conditionObj).concat(s);
    // 	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
    // 	globalStore.predictives = extend(globalStore.predictives, newPair);
    //   });
    // }
    
    // condition on data
    var itemData = refModule.getSubset(data, {objectSet: conditionObj.objectSet});
    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.label) + memo;
    }, 0, itemData);
  }, 0, conditions);

  // console.log(params);
  // console.log(score);

  factor(score);

  var paramsKey = _.values(params).join(',');
  return {predictive: globalStore.predictives, params : _.zipObject([paramsKey], [score])};
};

//var outputERP = Infer({method:'MCMC', kernel: 'HMC', samples: 500, lag: 2, burn: 100, verbose: true, model: modelAnalysis});

var outputERP = Infer({method: 'enumerate', model: modelAnalysis})

//console.log(outputERP);
refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
console.log('done writing: results in ' + globalConfig.outputFileName);
